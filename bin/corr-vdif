#! /usr/bin/python
"""
Correlate vdif packets and stream the intensity to disk.

"""

import argparse
import sys
import logging

import vdif_assembler

from ch_L1mock import L0


logger = logging.getLogger(__name__)


logging.basicConfig(level=logging.INFO)

main_parser = argparse.ArgumentParser(
        description="Correlate vdif packets and process intensity data.",
        )

# Get the call signature right in the help for nested parsers.
extended_prog = main_parser.prog
if len(sys.argv) > 1:
    extended_prog += ' ' + sys.argv[1]


# Initialize parser for parameters common to all actions.
common_args = argparse.ArgumentParser(
        prog=extended_prog,
        add_help=False,
        )

# This subparser of common_args specifies the source of vdif packets.
sources = common_args.add_subparsers(title="source",
        description='The source stream.',
        dest='source',
        )

network = sources.add_parser('network',
        help='Run a network capture',
        )

simulate = sources.add_parser('simulate',
        help='Run a simulated network capture',
        )
simulate.add_argument('--duration',
        type=float,
        default=60.,
        help="Duration of the simulation, in seconds. Default 60.",
        )
simulate.add_argument('--rate',
        type=float,
        default=6.4,
        help="Data rate, in Gbps. Default 6.4.",
        )

filelist = sources.add_parser('file-list',
        help='Run a disk capture from a file list.',
        )
filelist.add_argument('filelist',
        metavar='file_list.txt',
        help="File with list of file names.",
        )

mooseacq = sources.add_parser('moose-acq',
    help='Run a disk capture from a moose acquisition name.',
    description="Use the script `show-moose-acquisitions.py` to browse"
                " available acquisitions.",
    )
mooseacq.add_argument('acqname',
        help="Acquisition name",
        )

common_args.add_argument('--outdir', '-o',
        default="./",
        help="Where to write output files. Default is current directory",
        )
common_args.add_argument('--nframe-integrate', '-n',
        type=int,
        default=512,
        help="How many time frames to integrate."
        )
common_args.add_argument('--vdif-todisk',
        action='store_true',
        help="Also stream baseband (vdif) data to disk (requires sudo).",
        )


# This parser specifies what to do with correlated data.
action_subparsers = main_parser.add_subparsers(title="action",
        description="What to do with correlated data.",
        dest='action',
        )

todisk = action_subparsers.add_parser('todisk',
        help='Write to disk.',
        parents=[common_args]
        )

burstsearch = action_subparsers.add_parser('burst-search',
        help="Search for FRBs using 'Burst Search'.",
        parents=[common_args]
        )
burstsearch.add_argument('--todisk',
        action='store_true',
        help="Also stream correlated data to disk as in the 'todisk' action.",
        )

serve = action_subparsers.add_parser('serve',
        help='Serve correlated data over the network. NOT IMPLEMENTED.',
        parents=[common_args],
        )



def main(p):

    args = p.parse_args()

    #we must ignore the stream object
    #if args.source == 'moose-acq':
    #    stream = ch_vdif_assembler.moose_acquisition(args.acqname)
    #elif args.source == 'simulate':
    #    stream = ch_vdif_assembler.make_simulated_stream(
    #            nsec=args.duration, gbps=args.rate)
    #elif args.source == 'file-list':
    #    with file(args.filelist) as f:
    #        filelist = f.read().splitlines()
    #    stream = ch_vdif_assembler.make_file_stream(filelist)
    #elif args.source == 'network':
    #    stream = ch_vdif_assembler.make_network_stream()
    #else:
    #    # For debugging. Should never happen.
    #    raise RuntimeError()

    p = L0.CallBackCorrelator(
        nframe_integrate=args.nframe_integrate,
        )
    import matplotlib
    matplotlib.use('Agg')
    from ch_L1mock import burst_search_interface
    search_manager = burst_search_interface.Manager(
            p,
            trigger_action='save_plot_dm,print',
            )


    #no options yet
    #if args.action == 'todisk':
    #    p = L0.DiskWriteCorrelator(
    #            nframe_integrate=args.nframe_integrate,
    #            outdir=args.outdir,
    #            )
    #elif args.action == 'burst-search':
    #    p = L0.CallBackCorrelator(
    #            nframe_integrate=args.nframe_integrate,
    #            )
    #    import matplotlib
    #    matplotlib.use('Agg')
    #    from ch_L1mock import burst_search_interface
    #    search_manager = burst_search_interface.Manager(
    #            p,
    #            trigger_action='save_plot_dm,print',
    #            )
    #    if args.todisk:
    #        from ch_frb_io import stream as io_stream
    #        todisk_stream = io_stream.StreamWriter(args.outdir)
    #        p.add_diskwrite_callback(todisk_stream)

    # Initialize the search
    import threading
    search_thread = threading.Thread(
            target=search_manager.process_all,
            )
    search_thread.daemon = True

    #no upchannelization yet
    #assembler = vdif_assembler.assembler('network', '10050',False,4)
    assembler = vdif_assembler.assembler('disk', 'test.txt', False,4)
    assembler.register_processor(p)
    if args.action == 'burst-search':
        search_thread.start()
    print "burst_search started!"
    assembler.run()
    if args.action == 'burst-search':
        logger.info('Stream ended, waiting for burst search to finish.')
        search_thread.join()


if __name__ == "__main__":
    main(main_parser)
